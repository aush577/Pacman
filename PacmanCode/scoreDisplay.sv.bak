module scoreDisplay (input logic[5:0] score,
							output logic[7:0] numAddr1,
							output logic[7:0] numAddr2
							)
{
	case(score)
	
	8'd0:
	begin
	numAddr1 = 8'd0;
	numAddr2 = 8'd0;
	end
	
	8'd01:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd16;
	end
	
	8'd02:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd32;
	end
	
	8'd03:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd48;
	end
	
	8'd04:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd64;
	end
	
	8'd05:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd80;
	end
	
	8'd06:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd96;
	end
	
	8'd07:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd112;
	end
	
	8'd08:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd128;
	end
	
	8'd09:
	begin
	nummAddr1 = 8'd0;
	nummAddr2 = 8'd144;
	end
	
	8'd10:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd0;
	end
	
	8'd11:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd16;
	end
	
	8'd12:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd32;
	end
	
	8'd13:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd48;
	end
	
	8'd14:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd64;
	end
	
	8'd15:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd80;
	end
	
	8'd16:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd96;
	end
	
	8'd17:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd112;
	end
	
	8'd18:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd128;
	end
	
	8'd19:
	begin
	nummAddr1 = 8'd16;
	nummAddr2 = 8'd144;
	end
	
	8'd20:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd0;
	end
	
	8'd21:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd16;
	end
	
	8'd22:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd32;
	end
	
	8'd23:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd48;
	end
	
	8'd24:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd64;
	end
	
	8'd25:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd80;
	end
	
	8'd26:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd96;
	end

	8'd27:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd112;
	end

	8'd28:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd128;
	end

	8'd29:
	begin
	nummAddr1 = 8'd32;
	nummAddr2 = 8'd144;
	end

	8'd30:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd0;
	end

	8'd31:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd16;
	end

	8'd32:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd32;
	end

	8'd33:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd48;
	end

	8'd34:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd64;
	end

	8'd35:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd80;
	end

	8'd36:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd96;
	end

	8'd37:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd112;
	end

	8'd38:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd128;
	end

	8'd39:
	begin
	nummAddr1 = 8'd48;
	nummAddr2 = 8'd144;
	end

	8'd40:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd0;
	end

	8'd41:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd16;
	end

	8'd42:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd32;
	end

	8'd43:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd48;
	end

	8'd44:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd64;
	end

	8'd45:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd80;
	end

	8'd46:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd96;
	end

	8'd47:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd112;
	end

	8'd48:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd128;
	end

	8'd49:
	begin
	nummAddr1 = 8'd64;
	nummAddr2 = 8'd144;
	end

	8'd50:
	begin
	nummAddr1 = 8'd80;
	nummAddr2 = 8'd0;
	end
	
	
	default:
	begin
	numAddr1 = 8'd0;
	numAddr2 = 8'd0;
	end
	endcase
	
endmodule 